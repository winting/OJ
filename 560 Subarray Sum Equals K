class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        if(nums.size()<1)
            return 0;
        int res=0;
        for(int i=0;i<nums.size();i++)
        {
            int sum=0;
            for(int j=i;j<nums.size();j++)
            {
                sum+=nums[j];
                if(sum==k)
                    res++;
            }
        }
        return res;
    }
};

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        if(nums.size()<1)
            return 0;
        map<int,int> hash;
        int res=0;
        int sum=0;
        hash.insert(make_pair(0,1));
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            int diff=sum-k;
            auto iter=hash.find(diff);
            if(iter!=hash.end())
                res+=iter->second;
            iter=hash.find(sum);
            if(iter!=hash.end())
                iter->second++;
            else
                hash.insert(make_pair(sum,1));
        }
        return res;
    }
};
