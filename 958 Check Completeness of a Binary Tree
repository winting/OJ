/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if(root==NULL)
            return true;
        if(root&& root->left==NULL && root->right==NULL)
            return true;
        queue<TreeNode*> q;
        q.push(root);
        bool firstNull=false;
        while(q.size()>0)
        {
            TreeNode* tmp=q.front();
            q.pop();
            if(tmp==NULL)
            {
                if(!firstNull)
                    firstNull=true;
            }else
            {
                if(firstNull)
                    return false;
                q.push(tmp->left);
                q.push(tmp->right);
            }                        
        }
        return true;
    }
    
    void generateLevel(vector<vector<TreeNode*>>& dict, int dep)
    {
        if(dict[dep].size()<1)
            return;
        int len=dict[dep].size();
        vector<TreeNode*> v(pow(2,dep+1),NULL);
        dict.push_back(v);
        for(int i=0;i<len;i++)
        {
            TreeNode* tmp=dict[dep][i];
            if(tmp==NULL)
                continue;
            if(tmp->left)
                dict[dep+1][i==0?0:pow(2,i)]=tmp->left;
            if(tmp->right)
                dict[dep+1][i==0?1:pow(2,i)+1]=tmp->right;
        }
        int len2=dict[dep+1].size();
        bool continueGenerate=false;
        for(int i=0;i<len2;i++)
        {
            if(dict[dep+1][i]!=NULL){
             
                continueGenerate=true;
                break;
            }
        }
        if(continueGenerate)
            generateLevel(dict,dep+1);
    }
};
