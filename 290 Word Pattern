Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.


class Solution {
public:
    bool wordPattern(string pattern, string str) {
        map<char,string> dict;
        set<string> noDup;
        string word="";
        int str_idx=0;
        int pat_idx=0;
        for(;pat_idx<pattern.size();pat_idx++)
        {
            auto found = dict.find(pattern[pat_idx]);
            if(found!=dict.end())
            {
                string nextWord = found->second;
                int nex_idx=0;
                while(str_idx!=str.size()&&nex_idx<nextWord.size())
                {
                    if(str[str_idx]!=nextWord[nex_idx])
                    {
                        return false;
                    }
                    else
                    {
                        str_idx++;
                        nex_idx++;
                    }
                }
                if(nex_idx!=nextWord.size())
                {
                    return false;
                }
                if(str_idx!=str.size()&&str[str_idx]!=' ')
                {
                    return false;
                }
                if(str_idx!=str.size())
                {
                    str_idx++; //skip " "
                }
            }
            else
            {
                if(str_idx==str.size())
                {
                    return false;
                }
                string nextWord = "";
                while(str_idx!=str.size()&&str[str_idx]!=' ')
                {
                    nextWord+=str[str_idx++];
                }
                if(noDup.find(nextWord)!=noDup.end())
                {
                    return false;
                }
                dict.insert(make_pair(pattern[pat_idx],nextWord));
                noDup.insert(nextWord);
                if(str_idx!=str.size())
                {
                    str_idx++; //skip " "
                }
            }
        }
        if(pat_idx!=pattern.size())
        {
            return false;
        }
        if(str_idx!=str.size())
        {
            return false;
        }
        return true;
    }
};
