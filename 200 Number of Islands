Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3

Solution: mark '1' as other symbol, but need to go four directions as the example can be:
1 1 1
0 1 0
1 1 1
Answer is only 1 island. So need to go four directions.

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        // dp
        int row = grid.size();
        if(row==0)
            return 0;
        int col = grid[0].size();
        if(col==0)
            return 0;
        int res=0;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]=='1')
                {
                    res++;
                    markAdjacent(grid,i,j,row,col);
                }
            }
        }
        return res;
    }
    
    void markAdjacent(vector<vector<char>>& grid, int curR, int curC, int row, int col)
    {
        if(grid[curR][curC]=='1')
        {
            grid[curR][curC]*='a';          
            if(curR>0)
                markAdjacent(grid,curR-1,curC,row,col);
            if(curR<row-1)
                markAdjacent(grid,curR+1,curC,row,col);
            if(curC>0)
                markAdjacent(grid,curR,curC-1,row,col);
            if(curC<col-1)
                markAdjacent(grid,curR,curC+1,row,col);
        }
        else
            return;
    }
};
