The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:

Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.

// Solution: the idea is to 
// not rob the root: sum root->left and root->right
// rob the root: sum root->val and root->left->left+root->left+right + root->right->left+root->right->left

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        if(!root)
            return 0;
        if(!root->left && !root->right)
            return root->val;
        
        // not robRoot
        int left=0;
        int right=0;
        if(root->left)
            left=rob(root->left);
        if(root->right)
            right=rob(root->right);
        
        int notRobRoot = left+right;
        
        // rob root
        left=0;
        right=0;
        if(root->left)
        {
           left= (root->left->left?rob(root->left->left):0) + (root->left->right?rob(root->left->right):0);
        }
        if(root->right)
        {
            right= (root->right->left?rob(root->right->left):0) + (root->right->right?rob(root->right->right):0);
        }
        
        int robRoot = root->val+left+right;
        return max(robRoot,notRobRoot);
    }
};
