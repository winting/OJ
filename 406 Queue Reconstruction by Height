class Solution {
public:
    static bool cmp(vector<int> &a, vector<int> &b)
    {
        return a[0]<b[0] || (a[0]==b[0] && a[1]>b[1]);
    }
    
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        int len=people.size();
        if(len<=1)
            return people;
        sort(people.begin(),people.end(),cmp);
        vector<vector<int>> res(len, vector<int>(2,-1));
        for(int i=0;i<len;i++)
        {
            int k=people[i][1];
            int count=-1;
            int j=0;
            for(;j<len;j++)
            {
                if(res[j][0]==-1)
                {
                    count++;
                    if(count==k){
                    res[j][0]=people[i][0];
                    res[j][1]=people[i][1]; 
                        
                        break;
                    }
                }
            }   
        }
        return res;
    }
};

/** sort by the last number
static bool cmp(vector<int> &a, vector<int> &b)
    {
        return a[1]<b[1] || (a[1]==b[1] && a[0]<b[0]);
    }
    
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        if(people.size()<=1)
            return people;
        sort(people.begin(),people.end(),cmp);
        int start=1;
        while(start!=people.size())
        {
            int count=Taller(start,people);
            int diff=count-people[start][1];
            if(diff==0)
            {
                start++;
                continue;
            }else if(diff>0)
            {
                int diff=count-people[start][1];
                auto iter=people.begin();
                rotate(iter+start-diff,iter+start,iter+start+1);
                start=start-diff+1;
            }else
            {
                start++;
            }
        }
        return people;
    }
    
    int Taller(int idx, vector<vector<int>>& people)
    {
        int count=0;
        for(int i=0;i<idx;i++)
        {
            if(people[i][0]>=people[idx][0])
                count++;
        }
        return count;
    }
*/

/**
vector<T> vec = ...
vector<T>::iterator from = ...
vector<T>::iterator to = ...
if(from < to ) {
    rotate(from, from+1, to+1);
} else if (from > to) {
    rotate(to, from, from+1);
}
*/
