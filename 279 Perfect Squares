Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

Solution: DP, use space

class Solution {
public:
    int numSquares(int n) {
        // find the max square less than n
        int sq=1;
        while(sq*sq <=n)
            sq++;
        sq=sq-1;
        vector<int> dict;
        for(int i=0;i<sq;i++)
        {
            dict.push_back((i + 1)*(i + 1));
        }
        // calculate res[1...n]
        vector<int> res(n+1,INT_MAX);
        for(int i=1;i<n+1;i++)
        {
            for(int j=0;j<sq;j++)
            {
                if(dict[j]==i)
                {
                    res[i]=1;
                    break;
                }
                else
                {
                    if(i>dict[j])
                        res[i]=min(res[i],1+res[i-dict[j]]);
                }
            }
        }
        return res[n];
    }
};
