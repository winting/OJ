class Solution {
public:
    int longestMountain(vector<int>& A) {
        int len=A.size();
        if(len<=2)
            return 0;
        vector<int> left(len,0);
        vector<int> right(len,0);
        // left->right
        for(int i=1;i<len;i++)
        {
            if(A[i]>A[i-1])
            {
                left[i]=left[i-1]+1;
            }
        }
        // right->left
        for(int i=len-2;i>-1;i--)
        {
            if(A[i]>A[i+1])
                right[i]=right[i+1]+1;
        }
        int res=0;
        for(int i=0;i<len;i++)
        {
            int cur=left[i]+right[i]+1;
            if(left[i]>=1 && right[i]>=1 && cur>=3&& cur>res)
                res=cur;
        }
        return res;
    }
};


class Solution {
public:
    int longestMountain(vector<int>& A) {
        int len=A.size();
        if(len<=2)
            return 0;
        int res=0;
        int state=1;
        int cur=1;
        for(int i=1;i<len;i++)
        {
           if(state==1)
           {
               if(A[i]>A[i-1])
               {
                   cur++;
               }else if(A[i]==A[i-1])
                   cur=1;
               else
               {
                   if(cur>=2)
                   {                   
                   state=2;
                   cur++;                       
                   }else
                   {
                       cur=1;
                   }
               }
           }
           else
           {
               if(cur>=3&&cur>res)
                   res=cur;
               if(A[i]<A[i-1])
               {
                   cur++;
                   if(cur>=3&&cur>res)
                   res=cur;                   
               }else if(A[i]==A[i-1])
               {
                   cur=1;
                   state=1;
               }else
               {
                   cur=2; //3 2 5 
                   state=1;
               }
           }
        }
        
        if(state==2 && cur>=3&&cur>res)
            res=cur;
        return res;
    }
};
