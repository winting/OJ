class Solution {
public:
    bool canPartition(vector<int>& nums) {
        bitset<10001> bi(1);
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=10000;j>=0;j--)
            {
                if(bi[j]==1 && j+nums[i]<10001)
                {
                    bi[j+nums[i]]=1;                    
                }
            }
            sum+=nums[i];
        }
        if(sum%2==1)
            return false;
        return bi[sum/2]==1;
    }
};

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        set<int> dict;
        int sum=0;
        int len=nums.size();
        if(len<=1)
            return false;
        for(int i=0;i<len;i++)
            sum+=nums[i];
        if(sum%2==1)
            return false;
        dict.insert(0);
        for(int i=0;i<len;i++)
        {
            vector<int> tmp(dict.size());
            copy(dict.begin(), dict.end(), tmp.begin());
            for (auto it=tmp.begin(); it!=tmp.end(); ++it)
            {
                if(*it+nums[i]<=sum/2)
                    dict.insert(*it + nums[i]);
            }
        }
        
        return dict.find(sum/2)!=dict.end();
    }
};
