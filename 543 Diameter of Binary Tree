Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        if(root->left==NULL && root->right==NULL)
            return 0;
        int max=0;
        int left=depth(root->left,max);
        int right=depth(root->right,max);
        if(left+right>max)
            max=left+right;
        return max;        
    }
    
    int depth(TreeNode* root, int& max)
    {
        int dep=0;
        if(root==NULL)
        {
            return 0;            
        }
        else if(root->left==NULL && root->right==NULL)
        {            
            return 1;
        }
        else
        {
            int depL = depth(root->left,max);
            int depR = depth(root->right,max);
            if(depL+depR>max)
            {
                max=depL+depR;
            }
            return depL>depR?depL+1:depR+1;
        }
    }
    
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        if(root->left==NULL && root->right==NULL)
            return 0;
        int maxV=0;
        Travel(root,maxV);
        return maxV;
        
    }
    vector<int> Travel(TreeNode* root, int &maxV)
    {
        if(root->left==NULL && root->right==NULL)
            return vector<int> {0,0};
        if(root->left==NULL)
        {
            vector<int> rightV=Travel(root->right,maxV);
            int right=max(rightV[0],rightV[1])+1;
            if(right>maxV)
                maxV=right;
            return vector<int> {0,right};
        }
        if(root->right==NULL)
        {
            vector<int> leftV=Travel(root->left,maxV);
            int left=max(leftV[0],leftV[1])+1;
            if(left>maxV)
                maxV=left;
            return vector<int> {left,0};
        }else
        {            
            vector<int> leftV=Travel(root->left,maxV);
            int left=max(leftV[0],leftV[1])+1;            
            vector<int> rightV=Travel(root->right,maxV);
            int right=max(rightV[0],rightV[1])+1;
            if(left+right>maxV)
                maxV=left+right;
            return vector<int> {left,right};
                
        }
    }
};
