Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


Solution: a postive number plus a postive number will be bigger than itself.

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxNum = nums[0];
        int total = nums[0];
        for(int i=1;i<nums.size();i++)
        {
            maxNum = maxNum>total?maxNum:total;
            
            if(total<0)
            {                
                total = nums[i];
            }else
            {
                total+=nums[i];
            }
        }
        maxNum = maxNum>total?maxNum:total;  //Do not forget to compare again as maybe there are just two numbers in tht array.

        return maxNum;
    }
};


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int len = nums.size();
        if(len<1)
            return 0;
        int sum=nums[0];
        int maxSum=sum;
        for(int i=1;i<len;i++)
        {
            if(sum<0)
                sum=nums[i];
            else
                sum+=nums[i];
            
            if(sum>maxSum)
                maxSum=sum;
        }
        return maxSum;
    }
};
