Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]


Let us first divide the problem into three parts :
1.Nostock
2.Stock inhand
3.Sold

Nostock -- Two possibilities: 1.Didnt have stock in the previous day(Nostock on previous day) or
2.Sold the stock on the previous day
Stock Inhand -- Two possibilities : 1. Didnt have stock from previous day and buying stock on the current day(Nostock on previous day - price) -- We are subtracting price because we are buying stock . Profit gets diminished at this stage.
2. Stock might have been bought on someday be it previous day or the day before day and have been still kept in hand.(Stock inhand of previous day).
Sold -- stock was there and we have sold it on the current day(stock inhand on previous day + price) --We are adding the price because we are selling it on the current day.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n<2)
            return 0;
        vector<int> noStock(n,0);
        vector<int> inHand(n,0);
        vector<int> sold(n,0);
        inHand[0]=-prices[0];
        for(int i=1;i<n;i++)
        {
            noStock[i]=max(noStock[i-1],sold[i-1]);
            inHand[i]=max(inHand[i-1],noStock[i-1]-prices[i]);
            sold[i]=prices[i]+inHand[i];
        }
        return max(sold[n-1],noStock[n-1]);
    }
};
