Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

 

Constraints:

The number of elements of the BST is between 1 to 10^4.
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Use Stack:
//make sure the smallest is on the top, so traverse tree->right first

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<int> dict;        
        dict.push(root->val);
        traverseTree(root->left,dict);
        while(k>0)
        {
            k--;
            if(k==0 && !dict.empty())
            {
                return dict.top();
            }
            dict.pop();
            
            if(dict.empty() && k>0)
            {
                traverseTree(root->right,dict);
            }
        }
        return 0;
    }
    
    void traverseTree(TreeNode* root, stack<int>& dict)
    {
        if(!root)
            return;
        if(root->right)
            traverseTree(root->right,dict);
        dict.push(root->val);
        if(root->left)
            traverseTree(root->left,dict);
    }
};


Change to array:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> dict;
        traverseTree(root,dict);
        return dict[k-1];
    }
    
    void traverseTree(TreeNode* root, vector<int>& dict)
    {
        if(root->left)
            traverseTree(root->left,dict);
        dict.push_back(root->val);
        if(root->right)
            traverseTree(root->right,dict);
    }
};
