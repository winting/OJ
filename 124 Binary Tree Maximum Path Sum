Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

Solution: Notice that the path may just contain one node, or two nodes and may not be leaf nodes or root nodes, they just being connected, no other requirements

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {

        if(!root->left && !root->right)
            return root->val;
        
        int sum=INT_MIN;
        dfsSum(root,sum);
        return sum;
    }
    
    int dfsSum(TreeNode* root, int& sum)
    {
        if(!root->left && !root->right)
            return root->val;
        
        int left=INT_MIN;
        int right=INT_MIN;
    
        if(root->left)
            left=dfsSum(root->left, sum);
        if(root->right)
            right=dfsSum(root->right,sum);
        
        // left
        if(root->left && left>sum)
            sum=left;
        // left + root
        if(root->left && left+root->val>sum)
            sum=left+root->val;
        // right
        if(root->right && right>sum)
            sum=right;        
        // right + root
        if(root->right && right+root->val>sum)
            sum=right+root->val;
        // root alone
        if(root->val>sum)
            sum=root->val;
        // left+right+root
        if(root->left&& root->right&& left+right+root->val >sum)
            sum=left+right+root->val;
        
        int maxer=left>right?left:right;
        return maxer>0?maxer+root->val:root->val;
    }
};
