Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

Solution: to be clear out whether to set value for children or parent
When doing the insert or search, and finding the last char, it is actually manipulating its parent char.


class Trie {
public:
    struct Node
    {
        int val;
        vector<Node *> children;
        Node(int x)
        {
            val = x;
            children = vector<Node *>(26, NULL);
        };
    };
    typedef struct Node Node;
    /** Initialize your data structure here. */

    Node Head = Node(-1);

    Trie() {
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* _dummy = &Head;
        for (int i = 0; i < word.size(); i++)
        {
            if (_dummy->children[word[i] - 'a'] == NULL)
            {
                if (i < word.size() - 1)
                    _dummy->children[word[i] - 'a'] = new Node(0);
                else
                    _dummy->children[word[i] - 'a'] = new Node(1);
                if (i < word.size() - 1)
                    _dummy = _dummy->children[word[i] - 'a'];
                else
                    break;
            }
            else
            {
                if (i < word.size() - 1)
                    _dummy = _dummy->children[word[i] - 'a'];
                else
                    _dummy->children[word[i] - 'a']->val = 1;
            }
        }
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* _dummy = &Head;
        for (int i = 0; i < word.size(); i++)
        {
            if (_dummy->children[word[i] - 'a'] == NULL)
            {
                return false;
            }
            else
            {
                if (i < word.size() - 1)
                    _dummy = _dummy->children[word[i] - 'a'];
                else
                    return _dummy->children[word[i] - 'a']->val == 1;
            }
        }
        return false;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* _dummy = &Head;
        for (int i = 0; i < prefix.size(); i++)
        {
            if (_dummy->children[prefix[i] - 'a'] == NULL)
            {
                return false;
            }
            else
            {
                if (i < prefix.size() - 1)
                    _dummy = _dummy->children[prefix[i] - 'a'];
                else
                    return true;
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
